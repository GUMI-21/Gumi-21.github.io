[{"title":"GO-所有Panic的情况","date":"2022-03-27T08:41:57.000Z","url":"/2022/03/27/GO-%E6%89%80%E6%9C%89Panic%E7%9A%84%E6%83%85%E5%86%B5/","tags":["Golang"],"content":"Panic 1、数组或是切片越界 2、空指针调用 3、提早关闭HTTP响应体 4、除以0 5、向已经关闭的通道发送消息 6、重复关闭通道 7、关闭未初始化的通道 8、未初始化map 9、跨协程的恐慌处理 10、sync计数为负 wg := sync.WaitGroup&#123;&#125; wg.Add(-1) "},{"title":"Groutine、检测并修正竞争状态、通道","date":"2022-03-19T07:46:44.000Z","url":"/2022/03/19/Groutine%E3%80%81%E6%A3%80%E6%B5%8B%E5%B9%B6%E4%BF%AE%E6%AD%A3%E7%AB%9E%E4%BA%89%E7%8A%B6%E6%80%81%E3%80%81%E9%80%9A%E9%81%93/","tags":["并发,Golang"],"content":"关于如何使用groutine运行程序、检测并修正竞争状态、利用通道共享数据。参考至《GO语言实战》第六章内容 使用groutine运行程序** 检测并修正竞争状态 利用通道共享数据 当一个函数创建为 goroutine时，Go 会将其视为一个独立的工作单元。 并发与并行 当运行一个应用程序（如一个 IDE 或者编辑器）的时候，操作系统会为这个应用程序启动一个进程。可以将这个进程看作一个包含了应用程序在运行中需要用到和维护的各种资源的容器。 一个线程是一个执行空间，这个空间会被操作系统调度来运行函数中所写的代码。 并发（concurrency）不是并行（parallelism）。并行是让不同的代码片段同时在不同的物理处理器上执行。 并行的关键是同时做很多事情，而并发是指同时管理很多事情，这些事情可能只做了一半就被暂停去做别的事情了。 gouroutine 一个正运行的 goroutine 在工作结束前，可以被停止并重新调度。 调度器这样做的目的是防止某个 goroutine 长时间占用逻辑处理器。当 goroutine 占用时间过长时，调度器会停止当前正运行的 goroutine，并给其他可运行的 goroutine 运行的机会。 和其他函数调用一样，创建为 goroutine 的函数调用时可以传入参数。不过 goroutine 终止时无法获取函数的返回值。 记住，只有在有多个逻辑处理器且可以同时让每个goroutine 运行在一个可用的物理处理器上的时候，goroutine 才会并行运行。 写并发程序时的潜在危险，以及需要注意的事情： 竞争状态 如果两个或者多个groutine在没有互相同步的情况下，访问某个共享的资源，并试图同时读和写这个资源，就处于互相竞争的状态，这种情况被称为竞争状态。 同一时刻只能有一个goroutine对共享资源进行读和写操作。 Go 语言有一个特别的工具，可以在代码里检测竞争状态。 种修正代码、消除竞争状态的办法是，使用 Go 语言提供的锁机制，来锁住共享资源，从而保证 goroutine 的同步状态。 锁住共享资源 Go 语言提供了传统的同步 goroutine 的机制，就是对共享资源加锁。如果需要顺序访问一个整型变量或者一段代码，atomic 和 sync 包里的函数提供了很好的解决方案。 原子函数（atomic) 程序使用了 atmoic 包的 AddInt64 函数。这个函数会同步整型值的加法，方法是强制同一时刻只能有一个 goroutine 运行并完成这个加法操作。 另外LoadInt64和StoreInt64。这两个函数提供了一种安全地读和写一个整型值的方式。 互斥锁(mutex) 互斥锁用于在代码上创建一个临界区，保证同一时间只有一个goroutine可以执行这个临界区代码。 使用大括号只是为了让临界区看起来更清晰，并不是必需的。 通道☆ 当一个资源需要在 goroutine 之间共享时，通道在 goroutine 之间架起了一个管道，并提供了确保同步交换数据的机制。 声明通道时，需要指定将要被共享的数据的类型，可以通过通道共享内置类型、命名类型、结构类型和引用类型的值或者指针。 在Go语言中需要内置函数make来创建一个通道。 想通道发送值或者指针需要用到&lt;-操作符 为了让另一个 goroutine 可以从该通道里接收到这个字符串，我们依旧使用&lt;-操作符，但这次是一元运算符 无缓冲的通道 无缓冲的通道（unbuffered channel）是指在接收前没有能力保存任何值的通道。 这种类型的通道要求发送goroutine和接收goroutine同时准备好，才能完成发送和接收的操作。 如果没有同时准备好，goroutine就会阻塞等待。 有缓冲的通道 有缓冲的通道（buffered channel）是一种在被接收前能存储一个或者多个值的通道。 通道会阻塞发送和接收动作的条件也会不同。只有在通道中没有要接收的值时，接收动作才会阻塞。只有在通道没有可用缓冲区容纳被发送的值时，发送动作才会阻塞 无缓冲的通道保证进行发送和接收的 goroutine 会在同一时间进行数据交换；有缓冲的通道没有这种保证。 当通道关闭后，goroutine 依旧可以从通道接收数据，但是不能再向通道里发送数据。 有缓冲的通道和无缓冲的通道的例子很好地展示了如何编写使用通道的代码。在下一章，我们会介绍真实世界里的一些可能会在工程里用到的并发模式。 小结 并发是指goroutine运行的时候是相互独立的。 使用关键词go创建goroutine来运行函数。 goroutine在逻辑处理器上执行，而逻辑处理器具有独立的系统线程和运行队列。 竞争状态是指两个或者多个goroutine试图访问同一个资源。 原子函数和互斥锁提供了一种防止出现竞争状态的办法。 通道提供了一种在两个goroutine之间共享数据的简单方法。 无缓冲的通道保证同时交换数据，而有缓冲的通道不做这种保证。"},{"title":"工具命令记录","date":"2022-03-17T10:28:48.000Z","url":"/2022/03/17/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/","tags":["工具"],"content":"长期更新，记录常用的工具命令。目前包括：SQL、VIM、GIT、GO、爬虫的一些语法 SQL查找一个字段的所有不同值：使用 group by VIM粘贴模式 set paste 显示行号 set number 取消行号 set nonumber 删除包含某个字符串的行 :g/str/d 搜索 /str n 下一个, N 上一个 去掉包含重复的行 sort :g/^\\(.\\+\\)$\\n\\1/d GIT 分支操作 查看分支 git branch (&lt;-参数-&gt;) -r查看远程分支，没有参数查看本地分支。 删除分支 git branch -d GO 格式化占位符 普通占位符 Printf(&quot;%v&quot;,$v) %v输出变量原有的值，%+v打印结构体时会添加字段名，%T打印结构体名，%% 转义百分号符。 %f浮点型，%s字符串可以是string类型或者[]byte类型，%p指针地址 爬虫 如果header中包含&#39;content-type&#39;: &#39;application/json&#39;,说明服务端需要post的data是序列化的data，这时需要对Post请求中的data进行json编码再请求。 "},{"title":"个人书单","date":"2022-03-16T02:58:47.000Z","url":"/2022/03/16/%E4%B8%AA%E4%BA%BA%E4%B9%A6%E5%8D%95/","tags":["阅读"],"content":"— 这是一个长期更新的个人书单 — 未看：《小岛经济学》——彼得D·稀夫 《经济学原理》——格里高利·曼昆（比较系统） +++ 在看： 东野圭吾 《魔力的胎动》 已看：日本文学 东野圭吾 《嫌疑人X的献身》;《信》;《白夜行》;《恶意》;《悖论13》 村上村树 《挪威的森林》；《1Q84》 太宰治 《人间失格》;《东京奇谭集》;《东京》;《小丑之花》;《御伽草纸》; 龙之介 《罗生门》 经典名著《宽容》-房龙；《基督山伯爵》-大仲马；《飘》；《傲慢与偏见》；《红与黑》；《史记》； 中文文学三毛全集 《撒哈拉的沙漠》，《温柔的夜》，《我的宝贝》……"},{"title":"First Test","date":"2022-03-14T12:11:23.000Z","url":"/2022/03/14/test/","tags":["测试"],"content":"这是一个测试. 欢迎来到小站~"},{"title":"Hello World","date":"2022-03-13T11:50:22.030Z","url":"/2022/03/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]